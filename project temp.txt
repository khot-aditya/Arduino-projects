const char server[] = "thingspeak.com";
const char resource[] = "http://api.thingspeak.com/update?api_key=CRK1BLP31PCG2RHE";
const int port = 80;

const char apn[] = "WWW";
const char gprsUser[] = "";
const char gprsPass[] = "";

const char simPIN[] = "";

String apiKeyValue = "CRK1BLP31PCG2RHE";

#define MODEM_RST 5
#define MODEM_PWKEY 4
#define MODEM_POWER_ON 23
#define MODEM_TX 27
#define MODEM_RX 26
#define I2C_SDA 21
#define I2C_SCL 22

#define SerialMon Serial
#define SerialAT Serial1

#define SMS_TARGET "+919881439969"

#define TINY_GSM_MODEM_SIM800    // Modem is SIM800
#define TINY_GSM_RX_BUFFER 1024  // Set RX buffer to 1Kb

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "HX711.h"

#include <TinyGsmClient.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

#define DOUT 15
#define CLK 18
#define MQ 2

float calibration_factor = -234560;
float zero_factor = 8295405;
float strainThreshold = 5.00;

int initialMQValue = 0;
int MQValueInByte = 0;
int MQThreshold = 500;


unsigned long previousMillis = 0;  // will store last time LED was updated
const long interval = 5000;       // interval at which to blink (milliseconds)

HX711 scale(DOUT, CLK);

#define BAUD_RATE 115200

#ifdef DUMP_AT_COMMANDS
#include <StreamDebugger.h>
StreamDebugger debugger(SerialAT, SerialMon);
TinyGsm modem(debugger);
#else
TinyGsm modem(SerialAT);
#endif

#include <Adafruit_Sensor.h>

TwoWire I2CPower = TwoWire(0);

TinyGsmClient client(modem);

#define uS_TO_S_FACTOR 1000000UL
#define TIME_TO_SLEEP 3600

#define IP5306_ADDR 0x75
#define IP5306_REG_SYS_CTL0 0x00

bool setPowerBoostKeepOn(int en) {
  I2CPower.beginTransmission(IP5306_ADDR);
  I2CPower.write(IP5306_REG_SYS_CTL0);
  if (en) {
    I2CPower.write(0x37);  // Set bit1: 1 enable 0 disable boost keep on
  } else {
    I2CPower.write(0x35);  // 0x37 is default reg value
  }
  return I2CPower.endTransmission() == 0;
}

void setup() {
  SerialMon.begin(BAUD_RATE);

  lcd.begin();
  lcd.backlight();
  lcd.home();

  scale.set_scale();
  scale.set_offset(zero_factor);

  I2CPower.begin(I2C_SDA, I2C_SCL, 400000);
  Wire.begin(I2C_SDA, I2C_SCL);


  lcd.clear();
  bool isOk = setPowerBoostKeepOn(1);
  lcd.print(String("IP5306: ") + (isOk ? "OK" : "FAIL"));

  delay(1000);

  pinMode(MODEM_PWKEY, OUTPUT);
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);
  digitalWrite(MODEM_PWKEY, LOW);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_POWER_ON, HIGH);

  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(3000);

  lcd.clear();
  lcd.print("Initializing...");
  SerialAT.begin(BAUD_RATE, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(3000);

  lcd.clear();
  lcd.print("Restarting Modem");
  modem.restart();

  if (strlen(simPIN) && modem.getSimStatus() != 3) {
    modem.simUnlock(simPIN);
  }

  while (!SerialMon) { ; }

  lcd.clear();
  lcd.print("Starting...");

  delay(1000);
}

void loop() {
  scale.set_scale(calibration_factor);

  float strainValue = LoadCellHandler();
  int mqValue = MQSensorHandler();

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
      SerialMon.println(" fail");
    } else {
      SerialMon.println(" OK");

      SerialMon.print("Connecting to ");
      SerialMon.print(server);

      if (!client.connect(server, port)) {
        SerialMon.println(" fail");
      } else {
        SerialMon.println(" OK");

        SerialMon.println("Performing HTTP POST request...");
        // Prepare your HTTP POST request data (Temperature in Celsius degrees)
        String httpRequestData = "api_key=" + apiKeyValue + "&field1=" + String(strainValue)
                                 + "&field2=" + String(mqValue) + "";

        client.print(String("POST ") + resource + " HTTP/1.1\r\n");
        client.print(String("Host: ") + server + "\r\n");
        client.println("Connection: close");
        client.println("Content-Type: application/x-www-form-urlencoded");
        client.print("Content-Length: ");
        client.println(httpRequestData.length());
        client.println();
        client.println(httpRequestData);

        unsigned long timeout = millis();
        while (client.connected() && millis() - timeout < 10000L) {
          // Print available data (HTTP response from server)
          while (client.available()) {
            char c = client.read();
            SerialMon.print(c);
            timeout = millis(); 
          }
        }
        SerialMon.println();

        // Close client and disconnect
        client.stop();
        SerialMon.println(F("Server disconnected"));
        modem.gprsDisconnect();
        SerialMon.println(F("GPRS disconnected"));
      }
    }
  }
}

float LoadCellHandler() {
  float strain = scale.get_units();

  lcd.setCursor(0, 0);
  lcd.print("Strain: ");
  lcd.print(strain <= 0.00 ? 0 : strain);
  lcd.print(" kg");

  return strain;
}

int MQSensorHandler() {

  lcd.setCursor(0, 1);
  lcd.print("MQ Value: ");

  MQValueInByte = Serial.read();
  initialMQValue = analogRead(MQ) / 4;

  lcd.print(initialMQValue);

  return initialMQValue;
}